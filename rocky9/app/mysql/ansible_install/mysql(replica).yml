---
- name: Install MySQL Server
  hosts: mysql-slave
  become: yes
  vars:
    mysql_user: "user"
    mysql_group: "user"
    mysql_config_path: "/etc/mysql/"
    proxy: "http://xxx.xxx.xxx.xxx:3128/"
    new_mysql_root_password: "Root_Password"  # 새로 설정할 root 비밀번호
    db_password : "DB_user_Password"
    db_user : "DB_user"

  tasks:
    - name: Stop and disable firewalld
      systemd:
        name: firewalld
        state: stopped
        enabled: no

    - name: Configure dnf to use proxy
      lineinfile:
        path: /etc/dnf/dnf.conf
        regexp: "^proxy="
        line: "proxy={{ proxy }}"
        state: present

    # Prepare & Install Mysql
    - name: Import MySQL GPG key
      environment:
        http_proxy: "{{proxy}}"
        https_proxy: "{{proxy}}"
      rpm_key:
        state: present
        key: https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
    
    - name: Add MySQL repository
      environment:
        http_proxy: "{{proxy}}"
        https_proxy: "{{proxy}}"
      dnf:
        name: https://repo.mysql.com/mysql84-community-release-el9-1.noarch.rpm
        state: present
      
    - name: Install MySQL server
      dnf:
        name: mysql-server
        state: present

    # Setting Mysql Configuration                                           
    - name: Set Bind in my.cnf
      lineinfile:
        path: "/etc/my.cnf"
        regexp: '^bind-address'
        line: "bind-address = 0.0.0.0"
        create: yes
        
    - name: Set default-time-zone in my.cnf
      lineinfile:
        path: "/etc/my.cnf"
        regexp: '^default-time-zone '
        line: "default-time-zone = '+09:00'"
        create: yes

    - name: Set log timestamp format to KST
      lineinfile:
        path: "/etc/my.cnf"
        regexp: '^log_timestamps '
        line: "log_timestamps = SYSTEM"
        create: yes

    - name: Add master-specific settings to my.cnf
      lineinfile:
        path: "/etc/my.cnf"
        line: |
          ### slave
          slave-skip-errors=all
          server-id = {{ ansible_host.split('.')[-1] }}
          log-bin = /var/lib/mysql/mysql-bin
          read_only = 1
          tmpdir = /tmp
          binlog_format = ROW
          max_binlog_size = 1024M
          sync_binlog = 1
          binlog_expire_logs_seconds = 604800  # 7일 (7 * 24 * 60 * 60 초)
          slow_query_log = 1
        insertafter: EOF

    - name: Create and configure /etc/my.cnf.d/charset.cnf
      copy:
        dest: /etc/my.cnf.d/charset.cnf
        content: |
          [mysqld]
          character-set-server = utf8mb4

          [client]
          default-character-set = utf8mb4
        owner: root
        group: root
        mode: '0644'
  
    - name: Enable & Execute mysql
      shell: sudo systemctl enable --now mysqld

    - name: Retrieve the MySQL initial root password from log file
      shell: "grep 'temporary password' /var/log/mysqld.log | awk '{print $NF}'"
      register: mysql_root_password
      changed_when: false  # To prevent this task from being marked as "changed"
    
    - name: Show the MySQL initial root password
      debug:
        msg: "MySQL initial root password: {{ mysql_root_password.stdout }}"

    - name: Change MySQL root password using initial password via SQL query
      shell: >
        mysql --connect-expired-password -u root
        -p'{{ mysql_root_password.stdout }}'
        -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ new_mysql_root_password }}';"
      ignore_errors: yes  # 초기 비밀번호가 이미 변경된 경우 오류 무시

    # Create Main User  (% 대신 실제 사용 대역으로 지정 필요 ex. 10.10.%  )
    - name: Create a MySQL user via SQL query
      shell: >
        mysql -u root -p'{{ new_mysql_root_password }}' -e "
        CREATE USER '{{ db_user }}'@'%' IDENTIFIED BY '{{ db_password }}';
        GRANT ALL PRIVILEGES ON *.* TO '{{ db_user }}'@'%' WITH GRANT OPTION;
        FLUSH PRIVILEGES;"
      ignore_errors: yes  # 이미 user가 생성된 경우

    # Lock Main User if password attempts 3
    - name: Create a MySQL user via SQL query
      shell: >
        mysql -u root -p'{{ new_mysql_root_password }}' -e "
        ALTER USER '{{ db_user }}'@'%' FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 1;"
      ignore_errors: yes 

    - name: Restart MySQL server
      service:
        name: mysqld
        state: restarted

    # Master Server Active Binlog and Position Check
    - name: Get MySQL binary log status using shell
      shell: |
        mysql -u {{ db_user }} -p{{ db_password }} -h {{ groups['mysql-master'][groups['mysql-slave'].index(inventory_hostname)] }} -e "SHOW BINARY LOG STATUS;"
      register: binary_log_status
      changed_when: false  # 명령어 실행이 변경을 일으키지 않도록 설정
      failed_when: "'ERROR' in binary_log_status.stderr"  # 오류 발생 시 실패 처리

    - name: Set binary log file and position as variables
      set_fact:
        binlog_file: "{{ binary_log_status.stdout.split('\n')[1].split()[0] }}"
        binlog_position: "{{ binary_log_status.stdout.split('\n')[1].split()[1] }}"

    - name: Display binary log file and position
      debug:
        msg: "Binary log file: {{ binlog_file }}, Position: {{ binlog_position }}"

    # Check Master Plugin Command
    - name: Show MySQL replication change command
      debug:
        msg: >
          mysql -u plura -p'{{ db_password }}' -e "
          CHANGE REPLICATION SOURCE TO 
          SOURCE_HOST='{{ groups['mysql-master'][groups['mysql-slave'].index(inventory_hostname)] }}', 
          SOURCE_USER='repl', 
          SOURCE_PASSWORD='{{ db_password }}', 
          SOURCE_LOG_FILE='{{ binlog_file }}', 
          SOURCE_LOG_POS={{ binlog_position }};"

    - name: Connect Mysql Master
      shell: >
        mysql -u plura -p'{{ db_password }}' -e "STOP REPLICA;"
      ignore_errors: yes # 실행되고 있지 않다면 무시

    - name: Connect Mysql Master
      shell: >
        mysql -u plura -p'{{ db_password }}' -e "
        CHANGE REPLICATION SOURCE TO SOURCE_HOST='{{ groups['mysql-master'][groups['mysql-slave'].index(inventory_hostname)] }}', SOURCE_USER='repl', SOURCE_PASSWORD='{{db_password}}', SOURCE_LOG_FILE='{{ binlog_file }}', SOURCE_LOG_POS={{ binlog_position }};"

    - name: Connect Mysql Master
      shell: >
        mysql -u plura -p'{{ db_password }}' -e "START REPLICA;"
